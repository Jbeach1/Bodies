@page "/{LobbyName}"
@inject NavigationManager navigationManager

@using BlazorChat;
@using MudBlazor;
@using Microsoft.AspNetCore.SignalR.Client;

<h1>Bodies - @LobbyName</h1>
<hr />

@if (!_inLobby)
{  
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudGrid>
                <MudItem xs="12">
                    <MudStack>
                        <MudTextField @bind-Value="_username" Label="User Name" Variant="Variant.Text" AutoFocus=true></MudTextField>
                        <MudButton OnClick=JoinGame Variant="Variant.Outlined">Join Game</MudButton>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // display messages
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            <MudText Color="Color.Primary">
                @item.Body
            </MudText>
        }
    </div>

<MudStack Row=true Spacing="2">
        <MudButton Size="Size.Small" Variant="Variant.Outlined">Start Game</MudButton>
        <MudButton Size="Size.Small" OnClick=DisconnectAsync Variant="Variant.Outlined">Leave Game</MudButton>
</MudStack>
 
}

@code {
    // param to setup unique lobbys for each game
    [Parameter]
    public string LobbyName { get; set; } = string.Empty;

    private static Random _random = new Random();

    // flag to indicate if the user has joined with a user name
    private bool _inLobby = false;

    // name of the user who will be chatting
    private string _username = string.Empty;

    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    private string _hubUrl;

    private HubConnection _hubConnection;

    private int _numConnections;

    public async Task JoinGame()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        };

        try
        {
            // Start chatting and force refresh UI, ref: https://github.com/dotnet/aspnetcore/issues/22159
            _inLobby = true;
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + BlazorChatSampleHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();
            await _hubConnection.SendAsync("AddGroup", LobbyName);
            await SendAsync(RandomMessage(_username));
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _inLobby = false;
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        _messages.Add(new Message(name, message));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_inLobby)
        {
            await SendAsync($"{_username} has left the lobby.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _inLobby = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_inLobby && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Broadcast", _username, message, LobbyName);

            _newMessage = string.Empty;
        }
    }

    public static string RandomMessage(string userName)
    {
        string[] phrases =
        {
            $" {userName} - don't let the master catch you sleeping...",
            $"welcome, {userName} we've been waiting for you...",
            $"{userName} it took you long enough...",
            $"{userName} has arrived...",
            $"welcome {userName}, you should leave :)",
            $"{userName}! prepare to die!",
            $"{userName} likes cock, I mean cock, I mean cock!?",
            $" Hold the applause, ${userName} has joined",
            $" {userName} bees?",
            $" {userName} ... who let this guy in?"
        };

        return phrases[_random.Next(phrases.Length)];
    }



    private class Message
    {
        public Message(string username, string body)
        {
            Username = username;
            Body = body;
        }

        public string Username { get; set; }
        public string Body { get; set; }
    }
}